if ( ! Detector.webgl ) Detector.addGetWebGLMessage();



var Simulation = function () {
    this.planets = [];
    this.init();
};

Simulation.prototype.createPlanet = function (x,y,velx,vely,mass,radius) {
    this.planets.push(new Body(x,y,velx,vely,mass,radius));
};


Simulation.prototype.step = function () {
    //N-Body simulation
    for (var i=0; i < this.planets.length; i++) {
        for (var j=0; j<this.planets.length; j++) {
            if (i != j) {
                var gravity = this.planets[i].calculateAttraction(this.planets[j]);
                this.planets[i].applyForce(gravity);
            }
        }
    }

    //position updates
    for (var i=0; i < this.planets.length; i++) {
        this.planets[i].run();
    }
};


Simulation.prototype.init = function () {

	this.container = document.createElement( 'div' );
	document.body.appendChild( this.container );
	this.camera = new THREE.PerspectiveCamera( 45, window.innerWidth / window.innerHeight, 1, 2000 );
	this.camera.position.z = 800;
        this.camera.position.y = 200;
        this.camera.rotation.x = -Math.PI/8;

        this.scene = new THREE.Scene();

        /* plane */
        var line_material = new THREE.LineBasicMaterial( { color: 0x303030 } ),
        var geometry = new THREE.Geometry(),
        var floor = -75
        var step = 25;
        for ( var i = 0; i <= 40; i ++ ) {
              geometry.vertices.push( new THREE.Vector3( - 500, floor, i * step - 500 ) );
              geometry.vertices.push( new THREE.Vector3(   500, floor, i * step - 500 ) );

              geometry.vertices.push( new THREE.Vector3( i * step - 500, floor, -500 ) );    
              geometry.vertices.push( new THREE.Vector3( i * step - 500, floor,  500 ) );
        }
        var line = new THREE.Line( geometry, line_material, THREE.LinePieces );
        this.scene.add( line );
        /* /plane */

        /* light */
        var light;
	this.scene.add( new THREE.AmbientLight( 0x404040 ) );
	light = new THREE.DirectionalLight( 0xffffff );
	light.position.set( 0, 1, 0 );
	scene.add( light );
        /* /light */

	this.renderer = new THREE.WebGLRenderer( { antialias: true } );
	this.renderer.setPixelRatio( window.devicePixelRatio );
        this.renderer.setSize( window.innerWidth, window.innerHeight );

	this.container.appendChild( renderer.domElement );

	window.addEventListener( 'resize', this.onWindowResize, false );    
};

//responds to change of window dimensions
Simulation.prototype.onWindowResize = function () {
    camera.aspect = window.innerWidth / window.innerHeight;
    camera.updateProjectionMatrix();
    renderer.setSize( window.innerWidth, window.innerHeight );
};

Simulation.prototype.animate = function () {
        this.step();
        requestAnimationFrame( this.animate );
        this.render();
};

Simulation.prototype.render = function () {
        //var timer = Date.now() * 0.0001;
        this.renderer.render( this.scene, this.camera );
};
